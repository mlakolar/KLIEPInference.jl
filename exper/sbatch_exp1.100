#!/bin/sh

#SBATCH --ntasks=200
#SBATCH --job-name=KLIEP_exp1_100
#SBATCH --partition=broadwl
#SBATCH --time=1-12:00:00

module load parallel
module load hdf5

# the --exclusive to srun make srun use distinct CPUs for each job step
# -N1 -n1 allocates a single core to each task
# srun="srun --exclusive -N1 -n1"

# -j is the number of tasks parallel runs so we set it to $SLURM_NTASKS
# --joblog makes parallel create a log of tasks that it has already run
# --resume makes parallel use the joblog to resume from where it has left off
# the combination of --joblog and --resume allow jobs to be resubmitted if
# necessary and continue from where they left off
# parallel="parallel -j $SLURM_NTASKS --joblog __$SLURM_JOB_NAME.runtask.log --resume --colsep '\W'"

# this runs the parallel command we want
# in this case, we are running a script named runtask
# parallel uses ::: to separate options. Here {1..128} is a shell expansion
# so parallel will run the runtask script for the numbers 1 through 128
# {1} is the first argument
# as an example, the first job will be run like this:
# srun --exclusive -N1 -n1 ./runtask arg1:1 > runtask.1

# parallel -j $SLURM_NTASKS --joblog __$SLURM_JOB_NAME.runtask.log --resume srun --exclusive -N1 -n1 --error=/scratch/midway/mkolar/output/$SLURM_JOB_NAME.err.{1}.{2}.{3} --output=/scratch/midway/mkolar/output/$SLURM_JOB_NAME.out.{1}.{2}.{3} matlab -nodisplay -nosplash -nojvm -r '"simBelloni_solve({1}, {2}, {3})"' ::: {1..10} ::: {1..10} ::: {101..1000}

parallel -j $SLURM_NTASKS --joblog __$SLURM_JOB_NAME.runtask.log --resume srun --exclusive -N1 -n1 --error=/scratch/midway2/mkolar/output/$SLURM_JOB_NAME.err.{1} --output=/scratch/midway2/mkolar/output/$SLURM_JOB_NAME.out.{1} /home/mkolar/project-midway/julia-1.0.1/bin/julia experiment1.jl params_exp1_100_1.jld 500 500 {1} ::: {1..1000}
